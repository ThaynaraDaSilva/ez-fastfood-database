name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Set AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

      - name: Deploy VPC
        run: |
          cd aws-vpc
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Check Existing RDS Instance
        run: |
          cd aws-rds
          terraform init
          EXISTING=$(aws rds describe-db-instances --db-instance-identifier rds-postgres-dev-nvirginia-ezfastfood || echo "NOT_FOUND")
          if [[ "$EXISTING" != "NOT_FOUND" ]]; then
            echo "RDS instance already exists. Importing into Terraform state."
            terraform import aws_db_instance.postgresql rds-postgres-dev-nvirginia-ezfastfood
          fi

      - name: Check VPC IDs
        run: |
          VPC_ID_VPC=$(terraform output -state=../aws-vpc/terraform.tfstate vpc_id)
          VPC_ID_RDS=$(terraform state show aws_db_instance.postgresql | grep vpc_security_group_ids | cut -d'=' -f2 | tr -d ' ')
          if [[ "$VPC_ID_VPC" != "$VPC_ID_RDS" ]]; then
            echo "VPC IDs do not match!"
            exit 1
          else
            echo "VPC IDs match."
          fi

      - name: Deploy RDS
        run: |
          cd aws-rds
          terraform init
          terraform plan
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

